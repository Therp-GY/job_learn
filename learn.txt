# 项目结构

sy-cgsms：全专系统服务端代码，前后端分离，仅包含后端代码；全专系统测试http://192.168.44.190，将客户请求分发到本地服务器处理（有多个服务端则比如轮询分发）

- pom.xml

  maven依赖文件，用于管理Java项目的构建过程、依赖管理和项目生命周期。它提供了一种规范化的方式来组织和构建Java项目，帮助开发人员自动化构建过程，并处理项目所需的各种依赖关系。自动安装依赖的jar包。

- ./cgsms-patient

  ```
  ├──cgsms-patient  患者模块
  │   └──patient-api  （Feign调用相关接口，服务交互DTO对象）
  │   └──patient-biz  （业务处理模块，包含Mapper/Domain/Dao/Service/领域事件）
  │   └──patient-controller  (Controller层相关类，配置类，指定引用自定义模块)[依赖biz层]
  │   └──patient-server  （服务启动模块）[依赖controller层]  [6110]
  ```

  controller依赖注入biz中的service，biz中的service又依赖注入dao

  - ./patient-biz/main/java

    - ./com.senyao.cgsms.patient/assess 表单

    1. Component（组件）：
       Component文件夹通常用于存放可重用的组件或工具类。这些组件可能提供一些通用的功能，如数据校验、日志记录、异常处理等。它们可以被其他模块或组件引用和调用，以提供一致的功能和行为。

    2. Dao（数据访问对象）：
       Dao文件夹用于存放与数据库交互的代码。它包含了对数据库进行持久化操作的接口和实现类。这些类负责定义数据访问的接口方法，如增删改查（CRUD）操作，以及查询语句的编写和执行。Dao层的主要目标是将数据库操作与领域对象分离，提供数据访问的接口给上层模块使用。

       dao中写mapper接口，並在resource/中的同名xml文件中写下具体映射规则，包括表结构和增删改查，之后service中直接依赖注入mapper就可增删改查

    3. Entity（实体）：
       Entity文件夹用于存放与数据库表或文档集合相对应的实体类。这些实体类通常用于表示数据模型，与数据库中的表结构进行映射。每个实体类对应数据库中的一个表，实体类的属性对应表中的列。实体类负责封装数据，提供对数据的访问和操作方法。

    4. Service（服务）：
       Service文件夹用于存放业务逻辑的实现。服务层是应用程序的核心，负责处理业务规则、协调不同组件之间的交互，以及执行特定的业务操作。在Service文件夹中，可以定义各种服务接口和实现类，处理业务逻辑、调用Dao层进行数据访问，并返回处理结果给调用方。

       依赖注入dao中的bean，调用dao实现业务逻辑

- ./patient-biz/main/resources

  **mapper**：用于存放持久化框架的映射文件，如MyBatis（**mybatis**：是一种Java持久化框架，用于简化数据库访问的开发。它提供了一种将对象与数据库之间进行映射的方式，并通过配置文件和注解来执行数据库操作。）或其他ORM框架所使用的映射文件。这些映射文件用于描述对象与数据库表之间的映射关系。具体包含如下：

  1. SQL语句

     映射文件中可以包含各种SQL语句，如查询、插入、更新、删除等。这些SQL语句用于操作数据库表，通过对象与数据库表的映射关系，实现数据的持久化操作。

  2. 映射关系定义

     映射文件中还包含了对象与数据库表之间的映射关系定义。这些定义指定了对象属性与数据库表字段之间的对应关系，以及对象关联关系的处理方式。这样，持久化框架就能根据映射文件中的定义，将对象数据与数据库表进行转换和映射。

  3. 参数传递

     映射文件中可以定义方法的参数传递方式。这些定义包括传递简单参数、传递对象参数、传递Map参数等，用于在SQL语句中获取和使用方法参数。  

  新增guide表，mysql表名guide，entity/Guide.java为表建类，dao/GuideMapper.java针对表guide的数据库操作Mapper接口，GuideMapper.xml创建mybatis映射（相当于Mapper的.java实现），然后编写GuideService.java和GuideServiceImpl.java依赖于Mapper完成业务逻辑，然后编写GuideController.java完成url相应（即servlet组件的http请求关系写在了controller中）

- pojo类

  VO类：通常用于在数据访问层（如数据库访问层）和业务逻辑层之间传递数据

  1. VO类通常用于封装业务逻辑层和表示层（UI层）之间的数据传递，而DTO类主要用于封装数据传输层和业务逻辑层之间的数据传递。
  2. VO类的字段通常是业务相关的，直接反映了业务的概念，而DTO类的字段通常是与数据库表或外部服务的数据交互相关的，它们可能并不直接反映业务概念。
  3. VO类通常是只读的，即它们的字段在被初始化后不允许修改。而DTO类可能是可写的，因为它们的目的是在不同的层之间传输数据，可以用于收集用户输入或传递数据给外部服务。

  ```java
  public R<Guide> saveGuide(@RequestBody @Valid GuideVO guideVO) {
      // 进行修改
      Guide guide = new Guide();
      BeanUtils.copyProperties(guideVO, guide);
      guideService.edit(guide);
      return R.success();
  }
  
  ```

  例如controller中这一步，通过@RequestBody将post请求的数据转换为GuideVO对象，然后在controller中再将GuideVO保存为Guide对象并存储。
  
  因为前端发送到后端的请求（例如查询请求）并不一定包含entity中所有熟悉，因此转成的对象可能与dao中的对象不同，因此我们需要有VO类面向我们的UI界面；
  
  相同的，我们的controller或server中也不需要完整的dao中的entity对象，则中间的DTO类就来作为这个类

## spring boot

### 各种注解

- @GetMapping()

  `@GetMapping()`注解是Spring 4.3版本及以上版本中引入的注解，用于处理HTTP GET请求。它可以应用在Controller类或方法上，并指定一个或多个URL路径，当收到符合该路径的GET请求时，将调用相应的方法进行处理。

- @RequestMapping()

  `@RequestMapping()`注解是Spring中较早版本就存在的注解，它用于处理各种HTTP请求（GET、POST、PUT、DELETE等）。它可以用于Controller类或方法上，并指定一个或多个URL路径以及请求的HTTP方法，当收到符合该路径和HTTP方法的请求时，将调用相应的方法进行处理。

- @Resource

  具体来说，`@Resource`注解用于标记一个需要被注入的资源，通常是一个依赖的对象或者类。它的作用类似于`@Autowired`注解，用于自动装配依赖。

  使用`@Resource`注解时，可以在字段、方法、构造函数等位置进行标记。Spring Boot会根据被注解的位置，在容器中查找匹配的资源，并将其注入到标记的位置。

- @bean

  在Spring Boot中，`@Bean`是一个注解，用于将方法的返回值声明为一个Bean，并将其注册到Spring容器中。

  具体来说，`@Bean`注解通常用于@Configuration类中的方法上。当Spring Boot应用程序启动时，Spring容器会扫描带有`@Configuration`注解的类，并识别其中使用了`@Bean`注解的方法。然后，它会调用这些方法，并将方法的返回值注册为一个Bean，可以在应用程序中进行依赖注入或其他操作。
  
- 

## Maven

Maven是一个开源的项目管理和构建工具，旨在帮助开发人员更轻松地管理Java项目的构建过程、依赖管理和项目报告生成。它提供了一个结构化的项目描述文件（POM，Project Object Model），以及一套标准化的构建生命周期、插件体系和依赖管理机制。

jar包：

- config/settings.xml

  全局配置文件。该文件用于配置Maven的全局设置，包括远程仓库地址、代理设置、镜像仓库、身份验证信息等。通过编辑该文件，您可以对Maven进行全局配置，以适应您的项目需求和环境设置。

  - <server>

    `<server>` 元素用于配置与远程仓库或其他服务器的身份验证信息。通过在 `<server>` 元素中定义服务器的详细信息，Maven可以在需要与远程仓库进行交互时自动提供正确的身份验证凭据。

  - <profile>

    `<profile>`元素用于定义特定环境下的构建配置。通过使用 `<profile>` 元素，您可以为不同的构建环境（如开发、测试、生产等）定义不同的配置选项，例如不同的插件、依赖、构建参数等。

    每个 `<profile>` 元素可以包含以下常见的子元素：

    - `<id>`：唯一标识符，用于标识特定的构建配置。
    - `<activation>`：用于定义何时激活该构建配置的条件。例如，可以基于操作系统、JDK版本、环境变量等进行条件激活。
    - `<properties>`：定义构建过程中使用的属性或变量。
    - `<repositories>` 和 `<pluginRepositories>`：用于定义特定构建配置下使用的远程仓库。
    - `<dependencies>` 和 `<dependencyManagement>`：用于定义特定构建配置下使用的依赖项。
    - `<build>`：定义特定构建配置下的构建设置，包括插件、资源、编译选项等。

- mvn_resp

  Maven的本地存储库（Local Repository）是一个本地文件系统目录，用于存储Maven构建过程中下载的依赖库（JAR文件）、插件和其他构建所需的文件。当您在项目的POM文件中定义依赖关系时，Maven会自动从远程仓库下载所需的依赖项，并将其缓存到本地存储库中。这样，在后续的构建过程中，如果依赖项已经存在于本地存储库中，Maven会直接从本地存储库获取依赖项，而不是再次从远程仓库下载，从而提高构建速度并减少对网络的依赖。

- pom.xml

  描述项目结构、依赖关系、构建过程中需要执行的任务；和maven配合，pom中定义所有依赖，maven从仓库中下载

## Tomcat

是一个java servlet容器，用于后端；

当一个HTTP请求到达Servlet容器时，容器会根据请求的URL路径找到对应的Servlet。在Servlet容器中，有一个叫做Servlet映射的机制，它将URL路径映射到对应的Servlet。
假设有一个Servlet类叫做MyServlet，我们将其映射到路径 "/hello"。当一个客户端发送HTTP请求 "http://example.com/hello" 到Servlet容器时，容器会检查映射配置，发现该请求匹配到了"/hello"路径。然后容器会实例化MyServlet类的一个实例，并调用该实例的特定方法（如doGet()或doPost()等，取决于请求的方法类型）来处理请求。
在MyServlet的doGet()或doPost()方法中，开发者可以编写相应的Java代码来处理请求，并生成一个HTTP响应。例如，可以从请求中获取参数、执行一些业务逻辑，然后将结果以HTML格式发送回客户端。
Servlet容器会负责将生成的HTTP响应返回给客户端，这个过程中包括处理HTTP头部信息和消息体，并确保响应能够正确地传递给客户端。客户端（通常是Web浏览器）收到响应后，会解析响应并显示在用户界面上。
通过这种方式，Servlet容器充当了一个中间层，接收和处理HTTP请求，然后将处理结果发送回客户端。这使得开发者可以专注于业务逻辑的实现，而不需要关注与底层HTTP通信的细节。这也是为什么Java程序本身不能直接处理HTTP请求，而需要依赖Servlet容器的原因。

## Mybatis-plus

在不同层次

- 对dao类（Mapper）

  ```java
  public interface PatientMapper extends BaseMapper<Patient>{...}
  ```

  `BaseMapper`接口定义了一组通用的数据库操作方法，包括常用的CRUD（增删改查）操作，无需开发人员手动编写SQL语句即可实现对数据库表的操作；

  即我们在service中可以直接调用mapper.insert、mapper.updateById等，而不需要在Mapper中定义

- 对service类（service）

  ```java
  public class PatientServiceImpl extends ServiceImpl<PatientMapper, Patient> implements PatientService {...}
  ```

  `ServiceImpl`提供了大量的通用方法，包括对数据库表进行增删改查等操作；例如调用this.lambdaQuery()查询、或者调用别的服务是service.lambdaQuery()进行查询（用于service间互相调用）

# 微服务架构

请求进入网关，网关分发请求到各个服务器；

## NACOS

Nacos是一个服务发现和配置管理工具，用于实现微服务架构中的服务注册、发现和动态配置管理。

cgsms-gateway中的bootstrap.yml配置nacos地址，通过指定Nacos的服务器地址、用户名和密码，以及配置相关参数，实现与Nacos的集成。

nacos中的配置文件cgsms-gateway-dev.yml配置进入网关的请求，并分发到应用服务器上，其中lb://cgsms-patient对应着服务名，可以在nacos服务管理中找到该服务名，请求也会分发到该服务器上。

cgsms-patient相应的也需要在bootstrap.yml配置nacos地址，将服务注册到nacos上。

- 各种应用服务注册到nacos上，nacos上通过配置管理中的配置文件将服务集成
- 应用服务在nacos上配置对应数据库、redis、数据工厂

例如本地启动网关和患者服务，并配置到nacos上，并在D:\sy-cgsms\system-ui\.env.development中配置接口地址为http://localhost:6166/sys-auth，sys-auth对应nacos配置文件中

```
          uri: lb://cgsms-patient
          predicates:
            - Path=/sys-auth/*
```

`predicates`定义了一个断言条件，即只有请求的路径以`/sys-auth/`开头的请求会被匹配到。当匹配到该条件的请求时，`uri`指定的目标服务是`http://cgsms-patient`，Gateway会将请求转发到该URL。

因此将请求发送到本地网关，本地网关根据nacos上配置，检索nacos上的cgsms-patient患者服务并轮询发送请求，请求又被发送到我们本地的患者服务。

## 前后端分离

前端写完了各种页面以及页面之间的跳转，前端向后端（向网关，网关再分发请求到服务上）发送http请求，后端通过servlet分发请求并进行计算、访问数据等操作返回结果，前端得到结果后渲染到前端；（以前以后url之间跳转也涉及后端其实不然，前端间通过url跳转页面，实际上就是通过url找到不同的前端文件而已）

- url对前端和后端

  对于前端：

  1. 导航和页面跳转：前端应用程序使用URL来定义页面之间的跳转逻辑。用户点击链接或在浏览器中输入URL时，前端应用程序会根据URL来导航到相应的页面或执行相应的操作。
  2. 路由和页面渲染：前端框架（如Vue.js、React等）通过解析URL中的路径，确定要渲染的组件或页面内容。URL中的路径部分可以映射到前端应用程序的不同路由规则，从而决定加载哪个组件或页面。
  3. 参数传递：URL中的查询参数可以用于传递数据给前端应用程序。前端应用程序可以通过解析URL中的查询参数来获取相应的数据，以便在页面中展示或执行相应的逻辑。

  对于后端：

  1. 路由和请求处理：后端服务器通过解析URL中的路径，确定要处理的请求和执行相应的操作。URL中的路径可以映射到后端服务器的不同路由规则，从而决定调用哪个处理函数或执行哪个API。
  2. 参数获取：URL中的查询参数或路径参数可以用于向后端服务器传递数据。后端服务器可以通过解析URL中的参数来获取请求所需的数据，并进行相应的处理和响应。
  3. RESTful API设计：URL在RESTful API设计中扮演重要角色。RESTful API使用URL来表示资源和操作，通过不同的URL路径和HTTP方法来执行对资源的操作，从而实现统一的API接口。

- 前端自动生成

  爲什麽我们自动生成出的前端代码只有一个vue和一个js，因为在数据库中我们保存的component属性指明了前端模板文件的路径和path属性对应的url路径，因此输入url就能得到对应的模板文件；

  而实现页面跳转时，我们新增的页面也需要有对应的url和模板文件，不然访问不到，要么在我们的sys_menu中有，要么在我们的router/index.js中注册；
  
- 前端一些知识

  vue使用

  实现跳转，返回，下拉框的选定，跳转以后传来的id怎么办？

  一个页面增加按钮以及其函数，函数调用openPage跳转页面，跳转路由在router/index中定义；

  返回时在页面增加按钮并调用close函数，close函数中调用closeOpenPage关闭当前页面并跳回到上一个页面；

  - 整体

    data()定义属性，该属性可变，页面内各种部件调用这些属性从而动态显示；

    method定义各种函数，函数可能调用js中请求函数向后端请求数据，请求数据格式分三种，写到url中或者写到http body中，js中不同数据对应params、data；

    页面跳转也是把请求写在url或者通过query传递，(query其实也是会被转化为url里)；

    浏览器也可以断点调试，或者console.print控制台打印；

    子组件调用父组件（页面中调用fileupload），可以通过ref来调用，并访问子组件内部方法和属性；
  
    父子组件传参，可以通过prop属性，并使用watch监视prop属性变化来更新
    
  - 文件上传
  
    父子组件交互只在1打开某行修改界面、2提交信息时，1父（页面）向子（文件上传组件）发送该行已上传文件列表，后续都是文件组件自己维护自己的文件列表；2提交信息时子组件再将维护的文件列表发送给父组件，父提交表单即可
  

## Feign

用于服务之间的通信；

Feign客户端是一种声明式的HTTP客户端，它简化了与远程服务进行通信的过程。Feign是Netflix开源的一个轻量级HTTP客户端库，旨在简化构建基于HTTP的微服务架构的通信。

Feign客户端通过在接口上添加注解的方式定义了对远程服务的调用方法，包括请求路径、请求方法、请求参数、请求体等信息。然后，Feign客户端会根据这些注解的定义，自动生成符合要求的HTTP请求并发送到远程服务。

# git分析



# now



- /pojo/

  VO类：通常用于在数据访问层（如数据库访问层）和业务逻辑层之间传递数据

  1. VO类通常用于封装业务逻辑层和表示层（UI层）之间的数据传递，而DTO类主要用于封装数据传输层和业务逻辑层之间的数据传递。
  2. VO类的字段通常是业务相关的，直接反映了业务的概念，而DTO类的字段通常是与数据库表或外部服务的数据交互相关的，它们可能并不直接反映业务概念。
  3. VO类通常是只读的，即它们的字段在被初始化后不允许修改。而DTO类可能是可写的，因为它们的目的是在不同的层之间传输数据，可以用于收集用户输入或传递数据给外部服务。

  DTO类：通常用于在数据访问层（如数据库访问层）和业务逻辑层之间传递数据

  1. DTO类主要用于数据传输，其字段通常与数据库表或外部服务的数据交互相关，而不一定直接反映业务概念。
  2. DTO类的设计更注重数据的结构和传输效率，它们通常是可写的，可以用于收集用户输入或传递数据给外部服务。
  3. DTO类可能包含一些数据验证或转换的逻辑，以确保传输的数据符合预期的格式或类型。

  两者用于封装数据，以便在不同层或模块之间传递数据。它的主要目的是简化数据传输过程，将多个字段打包成一个对象，从而减少对多个独立参数的依赖，提高代码的可维护性和可读性。

  

# todo

- 7.14

  - 整体系统架构？全专后台管理系统local host、全专结合系统（192.168.44.225）关系以及他们在整个系统中所处的位置？：

    应该是一个应用服务，由网关分发请求到应用服务中，应用服务调用数据库、文件系统等等来完成任务；应用服务中包含代码，servlet容器处理请求发送请求

    后台管理和全专结合系统的后端代码都是在一套代码中的，只不过前端代码不同，前端向后端发送的http请求也不同导致有不同界面

  - 我所做的配置端是干什么的？

    后台管理系统即配置端

  - 网关？

    具体代码实现在com.senyao.medical中，打成jar包了

    文件服务也是通过网关？ 

    uploadInfo-quanzhuan.properties？uploadInfo？

    现在文件服务上传的时候需要token？

    目前只是硬编码写了文件地址，后续应该怎么改？

  - 专病前端迁移到全专，点击添加资料内可以上传文件，上传文件包含几个内容并且支持格式筛选，可以参照专病中

- 7.17

  - 前后端分离？

    目前相当于前端应用部署在了本地，本地根据接口地址VUE_APP_BASE_URL = 'http://localhost:6166/sys-auth'转发到后端，到底是转到哪里	：sys-auth对应nacos配置文件中

    ```
              uri: lb://cgsms-patient
              predicates:
                - Path=/sys-auth/*
    ```

    即转发到cgsms-patient名字的应用服务中去；

    `predicates`定义了一个断言条件，即只有请求的路径以`/sys-auth/`开头的请求会被匹配到。当匹配到该条件的请求时，`uri`指定的目标服务是`http://cgsms-patient`，Gateway会将请求转发到该URL。

  - 前端的部署

    前端也是部署在服务器上的，通过Nginx转发到对应的前端代码和静态文件中；前端主要性能限制于流量大小，因为前端不需要做过多的cpu计算等，因此负载均衡选择与否不同
    
  - 文件系统怎么配置的，通过网关？
  
- 7.18

  - vue使用

    实现跳转，返回，下拉框的选定，跳转以后传来的id怎么办？

    一个页面增加按钮以及其函数，函数调用openPage跳转页面，跳转路由在router/index中定义；

    返回时在页面增加按钮并调用close函数，close函数中调用closeOpenPage关闭当前页面并跳回到上一个页面；

    - 整体

      data()定义属性，该属性可变，页面内各种部件调用这些属性从而动态显示；
    
      method定义各种函数，函数可能调用js中请求函数向后端请求数据，请求数据格式分三种，写到url中或者写到http body中；
    
      页面跳转也是把请求写在url或者通过query传递；
    
      浏览器也可以断点调试，或者console.print控制台打印
  
- 7.21

  - 整體工作

    前后端分离，nacos分配服务，

    ![1689931539354](C:\Users\wxh1405\AppData\Roaming\Typora\typora-user-images\1689931539354.png)

- 7.25

  - 长宁公众号对接全专

    公众号（前端）  ----   微信登录（第三方系统） ---- 全传系统（服务端）

    公众号微信登陆获取accesscode，公众号发送给服务端accesscode，服务端将的corpid和通过accesscode生成的sign去/login/getInfo（第三方系统:微信）请求用户信息得到用户**微信信息**，再将用户信息解密，并往patient表中检测是否存在该用户，存在的话往自己建的第三方表中加患者id就行，不存在的话需要向第三方表中插入用户信息和空id值，返回未查询到该用户

    sign:对accesscode做的签名，用于发送到第三方系统（微信）后验证没有被篡改，才能返回用户信息

    注意：corid写在nacos配置端底部，例如 form:....  ； 长宁地址也写在nacos中，然后spring新建配置类从nacos中自动注入地址

    注意：在全专数据库中新增表来记录这些信息， 如下信息仍然相同

    注意：

    - 第三方登录关联表

      `user_id`

        `openid`
        
        `delete_flag` tinyint(1) NOT NULL COMMENT '逻辑删除（0：未删除；1：已删除）',
        `create_time` datetime NOT NULL COMMENT '创建时间',
        `update_time` datetime DEFAULT NULL COMMENT '更新时间',
        `create_user_id` bigint(20) NOT NULL COMMENT '创建人id',
        `update_user_id` bigint(20) DEFAULT NULL COMMENT '更新人id',
      `create_user_name` varchar(255) NOT NULL COMMENT '创建人名称',
        `update_user_name` varchar(255) DEFAULT NULL COMMENT '更新人名称',
      
        可以将user_id和openid建立联合索引，这样还可以避免回表，在用户已注册情况下再登录，通过检索openid得到用户id，并得到用户信息

  - 疑问
  
    ？爲什麽第三方要先给我们accesscode，不能直接给我们用户加密的信息；
  
    ？增加效率则疯狂增加第三方表
  
- 2023/7/28

  - 文件上传回调问题

    filelist绑定父组件的attachName，filelist又传入文件列表组件中，其中el-link对应filelist中url属性，从而点击跳转；filelist绑定父组件的方法：在watch handler中，

    父组件：拿每一行row的信息，得到url和name

    子组件：通过点击获得url和name

    新增的时候，先子组件获得url和name，再传给父组件

    修改时，父组件先根据row拿到url和name，传给子组件，子组件再做更改，最后传给父组件

- 2023/7/31

  - 爲什麽看基础知识这么慢
  - 看视频低效